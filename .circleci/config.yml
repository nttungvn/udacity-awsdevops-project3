version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
          type: string   
    steps:
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
      - run:
          name: Destroy frontend
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
          type: string     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/TFbubBBBgVe2hXFeyRNXtT/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if (( "$SUCCESS" == "1" ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend && npm install && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend && npm install && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend && npm install && npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend && npm install && npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build] 
      - run:
          name: Scan front-end
          command: |
            cd frontend && npm install && npm audit fix --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build] 
      - run:
          name: Scan back-end
          command: |
            cd backend && npm install && npm audit fix --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople \
              --region us-east-1 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople \
              --region us-east-1 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws --region us-east-1 ec2 describe-instances \
            --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
            --output text >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - "inventory.txt"
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e9:bb:98:2d:68:3f:23:11:ab:50:5d:18:a8:03:4c:10"
      - run:
          name: install ansible
          command: |
            pip install ansible
      - run:
          name: install awscli
          command: |
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Echo inventory
          command: cat ~/inventory.txt
      - run:
          name: Run playbook and configure server
          command: |
            cd .circleci/ansible && ansible-playbook -i ~/inventory.txt main.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Set enviroment
          command: |
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
      # - run:
      #     name: Run migrations
      #     command: |
      #       cd backend && npm install && npm run migrations > migrations_dump.txt
      - run:
          name: Echo dump
          command: |
            cat backend/migrations_dump.txt
            cat backend/.env
            echo $(curl ${TYPEORM_CONNECTION})
      - run:
          name: Send migration status to kvdb.io
          command: |
            cd backend
            if grep -q "has been executed successfully."  migrations_dump.txt
            then
              curl https://kvdb.io/TFbubBBBgVe2hXFeyRNXtT/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install tar utility
          command: |
            sudo apt-get update && sudo apt-get install python python-pip
      - run:
          name: Install ansible and awscli
          command: |
            pip install ansible 
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws --region us-east-1 ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e9:bb:98:2d:68:3f:23:11:ab:50:5d:18:a8:03:4c:10"
      - run:
          name: install requirement
          command: |
            pip install ansible
            pip install awscli
            apt update && apt install nodejs npm tar gzip -y
      - attach_workspace:
          at: ~/
      - run:
          name: Add enviroment
          command: |
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            export BACKEND_IP=$(cat ~/inventory.txt)
            scp -r -o StrictHostKeyChecking=no artifact.tar.gz ubuntu@$BACKEND_IP:/home/ubuntu/
            cd .circleci/ansible
            echo "Contents  of the ~/inventory.txt file is -------"
            cat ~/inventory.txt
            ansible-playbook -i ~/inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  smoke-test:
    docker:
      - image: python
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install ansible
            pip install awscli
            apt update && apt install nodejs npm tar gzip -y
      - attach_workspace:
          at: ~/
      - run:
          name: Echo inventory
          command: |
            cat ~/inventory.txt
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(cat ~/inventory.txt)
            export API_URL=http://$BACKEND_IP:3030
            echo $API_URL
            if curl "$API_URL/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo $URL
            if curl -s $URL | grep "Welcome"
            then
                # Change this to 0 after the job fails
              exit 1
            else
              exit 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Switch env prod
          command: |
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

workflows:
  deault:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires:
      #       - "build-frontend"
      # - test-backend:
      #     requires:
      #       - "build-backend"
      # - scan-frontend:
      #     requires:
      #       - "build-frontend"
      # - scan-backend:
      #     requires:
      #       - "build-backend"
      # - deploy-infrastructure:
      #     requires:
      #       - "scan-frontend"
      #       - "scan-backend"
      #       - "test-frontend"
      #       - "test-backend"
      # - configure-infrastructure:
      #     requires:
      #       - "deploy-infrastructure"
      # - run-migrations:
      #     requires:
      #       - "configure-infrastructure"
      # - deploy-frontend:
      #     requires:
      #       - "configure-infrastructure"
      # - deploy-backend:
      #     requires:
      #       - "configure-infrastructure"
      #       - "run-migrations"
      # - smoke-test:
      #     requires:
      #       - "deploy-frontend"
      #       - "deploy-backend"
      - run-migrations
      