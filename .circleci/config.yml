version: 2.1

commands:
  destroy_backend:
    steps:
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  destroy_frontend:
    steps:
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend && npm install && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend && npm install && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend && npm install && npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend && npm install && npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build] 
      - run:
          name: Scan front-end
          command: |
            cd frontend && npm install && npm audit fix --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build] 
      - run:
          name: Scan back-end
          command: |
            cd backend && npm install && npm audit fix --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople \
              --region us-east-1 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople \
              --region us-east-1 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws --region us-east-1 ec2 describe-instances \
            --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
            --output text >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - "inventory.txt"
      - destroy_backend

  configure-infrastructure:
    docker:
      - image: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e9:bb:98:2d:68:3f:23:11:ab:50:5d:18:a8:03:4c:10"
      - run:
          name: install ansible
          command: |
            pip install ansible
      - run:
          name: install awscli
          command: |
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Echo inventory
          command: cat ~/inventory.txt
      - run:
          name: Run playbook and configure server
          command: |
            cd .circleci/ansible && ansible-playbook -i ~/inventory.txt main.yml
      - destroy_backend
    
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend && npm install && npm run migrations > migrations_dump.txt
      - run:
          name: Debug
          command: |
            cat /home/circleci/.npm/_logs/*debug.log
      - run:
          name: Send migration status to kvdb.io
          command: |
            cd backend
            if grep -q "has been executed successfully."  migrations_dump.txt
            then
              curl https://kvdb.io/TFbubBBBgVe2hXFeyRNXtT/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

      # - destroy_backend

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - attach_workspace:
      #     at: ~/
      - run:
          name: Install tar utility
          command: |
            sudo apt-get update && sudo apt-get install python python-pip
      - run:
          name: Install ansible and awscli
          command: |
            pip install ansible 
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws --region us-east-1 ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy_frontend

workflows:
  deault:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires:
      #       - "build-frontend"
      # - test-backend:
      #     requires:
      #       - "build-backend"
      # - scan-frontend:
      #     requires:
      #       - "build-frontend"
      # - scan-backend:
      #     requires:
      #       - "build-backend"
      # - deploy-infrastructure
      # - configure-infrastructure:
      #     requires:
      #       - "deploy-infrastructure"
      - run-migrations
      # - deploy-frontend:
      #     requires:
      #       - "deploy-infrastructure"